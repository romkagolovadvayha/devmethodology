<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg-flat.dtd">
<?xml-stylesheet type="text/xsl" href="/oooxhtml/oooxhtml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">@page {margin-top:2cm;margin-bottom:2cm;margin-left:2cm;margin-right:2cm;}</style>
    <title>Архитектура приложений</title>
    <meta name="generator" content="oooxhtml/1.4"/>
    <meta name="HeadURL" content="$HeadURL$"/>
  </head>
  <body>
    <div class="container text">
      <h1 id="arhitektura_prilozenij">
        <a class="anchor" href="#arhitektura_prilozenij">Архитектура приложений</a>
      </h1>
      <h2 id="princip__arhitektur_">
        <a class="anchor" href="#princip__arhitektur_">Принципы архитектуры</a>
      </h2>
      <p>Корпоративная архитектура заключается в проектировании слабосвязанных, повторно используемых, автоматизированно тестируемых сервисов, выполняющих одну бизнес-функцию.</p>
      <h3 id="razdelenie_funkcij">
        <a class="anchor" href="#razdelenie_funkcij">Разделение функций</a>
      </h3>
      <ol>
        <li>
          <p>Каждый отдельно взятый компонент или сервис должен отвечать только за одну конкретную бизнес-функцию</p>
        </li>
        <li>
          <p>Компонент или сервису не должны быть известны детали других компонентов или сервисов.</p>
        </li>
      </ol>
      <h3 id="gruppirovanie_servisov">
        <a class="anchor" href="#gruppirovanie_servisov">Группирование сервисов</a>
      </h3>
      <p>Сервисы, использующие общую предметную область, группируются в модули.</p>
      <h3 id="povtornoe_ispol_zovanie_servisov">
        <a class="anchor" href="#povtornoe_ispol_zovanie_servisov">Повторное использование сервисов</a>
      </h3>
      <p>Для обеспечения повторного использования сервисов, зависимости сервисов <br/>передаются динамически через <a href="https://ru.wikipedia.org/wiki/HATEOAS">HATEOAS (Hypermedia as the Engine of Application State)</a>.</p>
      <h3 id="tip__zavisimostej">
        <a class="anchor" href="#tip__zavisimostej">Типы зависимостей</a>
      </h3>
      <p>Зависимые сервисы в зависимости от выбранной архитектуры могут предоставлять программный интерфейс либо готовое отображение.</p>
      <p>Допустимо использование низкоуровневых, повторно используемых зависимостей, предоставляющих простой программный интерфейс и простую, не "плывущую" структуру данных, например для обмена структурированной файловой информацией. Данная структура не завязывается на конкретное приложение и является транзитной.</p>
      <p>В остальных случаях, наиболее простой способ подключения зависимостей - виде готовых визуальных компонентов, подключаемых в iframe.</p>
      <h3 id="tip__vzaimodejstvij">
        <a class="anchor" href="#tip__vzaimodejstvij">Типы взаимодействия</a>
      </h3>
      <p>При проектирования слабо связанных сервисов существует два типа взаимодействия</p>
      <ol>
        <li>
          <p>Синхронное взаимодействие</p>
        </li>
        <li>
          <p>Асинхронное взаимодействие</p>
        </li>
      </ol>
      <p>Предпочтение отдается асинхронному взаимодействию (получающая сторона запрашивает данные при необходимости)</p>
      <h2 id="princip__proektirovanij">
        <a class="anchor" href="#princip__proektirovanij">Принципы проектирования</a>
      </h2>
      <ol>
        <li>
          <p>
            <a href="https://docs.ilb.ru/books/productmanagement/iconix/Моделирование_прецедентов.doc">Процесс разработки программного обеспечения ICONIX</a>
          </p>
        </li>
        <li>
          <p>Проектирование на основе предметной области (<a href="ddd.xhtml">Domain Driven Design, DDD</a>)</p>
        </li>
        <li>
          <p>Разработка через тестирование (<a href="tdd.xhtml">Test Driven Design, TDD</a>)</p>
        </li>
      </ol>
    </div>
  </body>
</html>
