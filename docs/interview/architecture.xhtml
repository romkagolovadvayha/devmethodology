<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg-flat.dtd">
<?xml-stylesheet type="text/xsl" href="/oooxhtml/oooxhtml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">@page {margin-top:2cm;margin-bottom:2cm;margin-left:2cm;margin-right:2cm;}</style>
    <title>Вопрос интервью</title>
    <meta name="generator" content="oooxhtml/1.4"/>
    <meta name="HeadURL" content="$HeadURL$"/>
  </head>
  <body>
    <div class="container text">
      <h1 id="arhitektura">
        <a class="anchor" href="#arhitektura">Архитектура</a>
      </h1>
      <h2 id="metodiceskij_material">
        <a class="anchor" href="#metodiceskij_material">Методический материал</a>
      </h2>
      <p>Чистая архитектура. Искусство разработки программного обеспечения. Роберт Мартин.</p>
      <h2 id="vopros_">
        <a class="anchor" href="#vopros_">Вопросы</a>
      </h2>
      <ol>
        <li>
          <p>Структурное программирование.</p>
          <ol>
            <li>
              <p>Какие управляющие структуры используются в структурном программировании? </p>
            </li>
            <li>
              <p>Что такое функциональная декомпозиция? Как функциональная декомпозиция помогает в тестировании?</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Объектно-ориентированное программирование: инкапсуляция, наследование, полиморфизм. Инверсия зависимостей. </p>
          <ol>
            <li>
              <p>Какой механизм обеспечивает независимость слоев приложения?</p>
            </li>
            <li>
              <p>Как отделить бизнес-правила от пользовательского интерфейса и базы данных?</p>
            </li>
            <li>
              <p>Нарисуйте схему инверсии зависимости для примера: Функция HighLevel вызывает функцию MiddleLevel.F(). Укажите направление потока исполнения и направление зависимости.</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Функциональное программирование</p>
          <ol>
            <li>
              <p>Какие проблемы несет использование изменяемых переменных в многопоточном окружении?</p>
            </li>
            <li>
              <p>Опишите стратегию "Регистрация событий" (event sourcing). В чем достоинства и недостатки данной стратегии? </p>
            </li>
          </ol>
        </li>
        <li>
          <p>Принципы SOLID</p>
          <ol>
            <li>
              <p>Цели принципов SOLID</p>
            </li>
            <li>
              <p>Принцип единственной ответственности (SRP). Какие проблемы возникают при нарушении принципа? Механизмы решения проблемы. Нарисовать схему шаблона "Фасад".</p>
            </li>
            <li>
              <p>Принцип открытости/закрытости (OCP). Цели.</p>
            </li>
            <li>
              <p>Принцип подстановки Барбары Лисков (LSP). Последствия нарушения LSP.</p>
            </li>
            <li>
              <p>Принцип разделения интерфейсов (ISP). Последствия нарушения ISP.</p>
            </li>
            <li>
              <p>Принцип инверсии зависимости (DIP). Нарисовать шаблон "Абстрактная фабрика"</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Компоненты программного обеспечения</p>
          <ol>
            <li>
              <p>Принцип эквивалентности повторного использования и выпусков (REP)</p>
            </li>
            <li>
              <p>Принцип согласованного изменения (CCP)</p>
            </li>
            <li>
              <p>Принцип совместного повторного использования (CRP)</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Сочетание компонентов</p>
          <ol>
            <li>
              <p>Принцип ацикличности зависимостей</p>
            </li>
            <li>
              <p>Принцип устойчивых зависимостей</p>
            </li>
            <li>
              <p>Принцип устойчивости абстракций</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Бизнес-правила</p>
          <ol>
            <li>
              <p>Что такое бизнес-правила? Приведите примеры бизнес-правил.</p>
            </li>
            <li>
              <p>Что такое сущности? Может ли сущность зависеть от выбора БД, пользовательского интерфейса или сторонних фреймворков?</p>
            </li>
            <li>
              <p>Что такое варианты использования? Могут ли сущности знать о вариантах использования? Должен ли вариант использования знать транспортный уровень (HTTP,SQL), особенности интерфейса пользователя?</p>
            </li>
          </ol>
        </li>
        <li>
          <p>Архитектура</p>
          <ol>
            <li>
              <p>Что такое архитектура. Цель архитектуры программного обеспечения. Из чего складывается стоимость программного обеспечения.</p>
            </li>
            <li>
              <p>Характеристики архитектуры: независимость от фреймворков, простота тестирования, независимость от пользовательского интерфейса, независимость от базы данных, независимость от внешних агентов.</p>
            </li>
            <li>
              <p>Нарисуйте чистую архитектуру в виде концентрических кругов: сущности, варианты использования, адаптеры интерфейсов, фреймворки и драйверы. Опишите назначение этих элементов. Назовите правило зависимостей. Какие данные пересекают границы?</p>
            </li>
            <li>
              <p>Опишите шаблон "Скромный объект" и его использование в тестировании. Что такое модель представления? Как отображаются элементы управления в модели представления?</p>
            </li>
            <li>
              <p>Тестируемая архитектура. Шлюзы к базам данных. Может ли вариант использования напрямую обращаться к SQL?</p>
            </li>
            <li>
              <p>Опишите шаблон "Стратегия".</p>
            </li>
          </ol>
        </li>
      </ol>
    </div>
  </body>
</html>
